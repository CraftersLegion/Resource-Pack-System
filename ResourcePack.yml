ResourcePackInit:
    type: task
    debug: false
    script:
    # Create New File if Doesn't Exist
    - if !<server.has_file[data/resourcepack.yml]>:
        - yaml create id:resourcepack
        - yaml savefile:data/resourcepack.yml id:resourcepack
    # Load Old One If Already Exists
    - else:
        - yaml load:data/resourcepack.yml id:resourcepack
        
ResourcePackExit:
    type: task
    debug: false
    script:
    # Save Current Configuration
    - yaml savefile:data/resourcepack.yml id:resourcepack
    
ServerPackUpdate:
    type: task
    debug: false
    script:
    # Update Pack for All Players
    - foreach <server.list_online_players.exclude[<player>]>:
        - adjust <player> "resource_pack:<yaml[resourcepack].read[url]>"
        
ResourcePackCommand:
    type: command
    name: resourcepack
    usage: "/rp help"
    description: "Command for resource pack system management."
    aliases:
    - rp
    - resource
    debug: false
    script:
    - if <context.server> || <player.is_op> || <player.has_permission[resourcepack.manage]>:
        - define prefix "<&f>[<&c>ResourcePack<&f>]<&7>"
        - if !<context.args.is_empty>:
            - if <context.args.get[1]> == "help":
                - narrate "<def[prefix]> Full List of Available Commands:"
                - narrate "<def[prefix]> /rp help - List all commands."
                - narrate "<def[prefix]> /rp hash - Get current resource pack hash."
                - narrate "<def[prefix]> /rp sethash <&lt>hash<&gt> - Set current resource pack hash."
                - narrate "<def[prefix]> /rp reload - Reload current configuration and all player packs."
                - narrate "<def[prefix]> /rp setpack <&lt>url<&gt> - Set current resource pack url."
                - narrate "<def[prefix]> /rp setspawn - Set's the normal spawn to your location, for after the pack is loaded."
                - narrate "<def[prefix]> /rp setlobby - Set's the lobby within your world for loading of the pack."
            - else if <context.args.get[1]> == "hash":
                - narrate "<def[prefix]> The current resource pack hash is: <yaml[resourcepack].read[hash]>"
            - else if <context.args.get[1]> == "sethash":
                - if <context.args.get[2]||null> != null:
                    - yaml id:resourcepack set hash:<context.args.get[2]>
                    - narrate "<def[prefix]> You successfully changed the resource pack hash to <&dq><context.args.get[2]><&dq>"
                - else:
                    - narrate "<def[prefix]> You need to specify a new hash to set. Usage: /rp sethash <&lt>hash<&gt>"
            - else if <context.args.get[2]> == "reload":
                - inject ResourcePackExit
                - inject ResourcePackInit
                - inject ServerPackUpdate
            - else if <context.args.get[1]> == "setpack":
                - if <context.args.get[2]||null> != null:
                    - yaml id:resourcepack set url:<context.args.get[2]>
                    - narrate "<def[prefix]> You successfully changed the resource pack hash to <&dq><context.args.get[2]><&dq>"
                - else:
                    - narrate "<def[prefix]> You need to specify a new hash to set. Usage: /rp setpack <&lt>url<&gt>"  
            - else if <context.args.get[1]> == "setspawn":
                - if !<context.server>:
                    - yaml id:resourcepack set spawn:<player.location>
                    - yaml savefile:data/resourcepack.yml id:resourcepack
                    - narrate "<def[prefix]> The spawn has now been set to your current location."
                - else:
                    - narrate "<def[prefix]> Only a player can use this command."]
            - else if <context.args.get[1]> == "setlobby":
                - if !<context.server>:
                    - yaml id:resourcepack set lobby:<player.location>
                    - yaml savefile:data/resourcepack.yml id:resourcepack
                    - narrate "<def[prefix]> The spawn has now been set to your current location."
                - else:
                    - narrate "<def[prefix]> Only a player can use this command."
            - else:
                - narrate "<def[prefix]> Unknown command. Type <&dq>/help<&dq> for a list of commands."
        - else:
            - narrate "<def[prefix]> Type <&dq>/help<&dq> for a list of commands."
            
ResourcePackEvents:
    type: world
    debug: false
    events:
    
        on resource pack status:
        
        # Player Pack Events
        - if <context.status> == "DECLINED":
            - kick <player> "reason:<&4><&l>ResourcePackRequiredError<&nl><&f>You must download the resource pack to play."
        - else if <context.status> == "FAILED_DOWNLOAD":
            - kick <player> "reason:<&4><&l>ResourcePackDownloadError<&nl><&f>There was a problem downloading the resource pack."
            
        # Pack Update Events
        - if <context.status> != <yaml[resourcepack].read[hash]>:
            # Update Resource Pack Hash
            - yaml id:resourcepack set hash:<context.hash>
            - yaml savefile:data/resourcepack.yml id:resourcepack
            - inject ServerPackUpdate
            
        on player joins:
        # Send Player Current Pack on Join
        - wait 20t
        - adjust <player> "resource_pack:<yaml[resourcepack].read[url]>"
            